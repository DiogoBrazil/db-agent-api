generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model addresses {
  id           Int       @id @default(autoincrement())
  customer_id  Int
  street       String    @db.VarChar(100)
  number       String    @db.VarChar(20)
  complement   String?   @db.VarChar(100)
  neighborhood String    @db.VarChar(50)
  city         String    @db.VarChar(50)
  state        String    @db.VarChar(2)
  zip_code     String    @db.VarChar(9)
  is_default   Boolean?  @default(false)
  customers    customers @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  orders       orders[]
}

model customers {
  id         Int         @id @default(autoincrement())
  name       String      @db.VarChar(100)
  email      String      @unique @db.VarChar(100)
  cpf        String      @unique @db.VarChar(14)
  phone      String?     @db.VarChar(20)
  created_at DateTime?   @default(now()) @db.Timestamp(6)
  updated_at DateTime?   @default(now()) @db.Timestamp(6)
  addresses  addresses[]
  orders     orders[]
}

model order_items {
  id         Int      @id @default(autoincrement())
  order_id   Int
  product_id Int
  quantity   Int
  unit_price Decimal  @db.Decimal(10, 2)
  subtotal   Decimal  @db.Decimal(10, 2)
  orders     orders   @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  products   products @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([order_id], map: "idx_order_items_order")
  @@index([product_id], map: "idx_order_items_product")
}

model order_status {
  id                   Int                    @id @default(autoincrement())
  name                 String                 @db.VarChar(50)
  description          String?
  order_status_history order_status_history[]
  orders               orders[]
}

model order_status_history {
  id           Int          @id @default(autoincrement())
  order_id     Int
  status_id    Int
  comment      String?
  created_at   DateTime?    @default(now()) @db.Timestamp(6)
  orders       orders       @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  order_status order_status @relation(fields: [status_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model orders {
  id                   Int                    @id @default(autoincrement())
  customer_id          Int
  address_id           Int
  status_id            Int
  payment_method_id    Int
  total_amount         Decimal                @db.Decimal(10, 2)
  shipping_cost        Decimal                @db.Decimal(10, 2)
  created_at           DateTime?              @default(now()) @db.Timestamp(6)
  updated_at           DateTime?              @default(now()) @db.Timestamp(6)
  order_items          order_items[]
  order_status_history order_status_history[]
  addresses            addresses              @relation(fields: [address_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  customers            customers              @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  payment_methods      payment_methods        @relation(fields: [payment_method_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  order_status         order_status           @relation(fields: [status_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  payments             payments[]

  @@index([customer_id], map: "idx_orders_customer")
  @@index([status_id], map: "idx_orders_status")
}

model payment_methods {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(50)
  description String?
  orders      orders[]
  payments    payments[]
}

model payments {
  id                Int             @id @default(autoincrement())
  order_id          Int
  payment_method_id Int
  amount            Decimal         @db.Decimal(10, 2)
  status            String          @db.VarChar(50)
  transaction_id    String?         @db.VarChar(100)
  payment_date      DateTime?       @db.Timestamp(6)
  created_at        DateTime?       @default(now()) @db.Timestamp(6)
  updated_at        DateTime?       @default(now()) @db.Timestamp(6)
  orders            orders          @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  payment_methods   payment_methods @relation(fields: [payment_method_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([order_id], map: "idx_payments_order")
}

model product_categories {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(50)
  description String?
  products    products[]
}

model products {
  id                 Int                @id @default(autoincrement())
  category_id        Int
  name               String             @db.VarChar(100)
  description        String?
  price              Decimal            @db.Decimal(10, 2)
  stock_quantity     Int                @default(0)
  sku                String             @unique @db.VarChar(50)
  brand              String?            @db.VarChar(50)
  created_at         DateTime?          @default(now()) @db.Timestamp(6)
  updated_at         DateTime?          @default(now()) @db.Timestamp(6)
  order_items        order_items[]
  product_categories product_categories @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
